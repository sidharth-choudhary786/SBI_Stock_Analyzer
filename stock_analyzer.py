# -*- coding: utf-8 -*-
"""stock_analyzer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jnE45qLNccT0qaEBO0zlfvEAhT51y_CH
"""

import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

def smart_stock_analyzer(company_name=None):
    """
    SMART STOCK ANALYZER - With Individual & Bulk Analysis
    """
    if company_name is None:
        print("🧠 SMART STOCK ANALYZER")
        print("=" * 50)
        company_name = input("📈 Enter Stock Symbol: ").strip().upper()

    if not company_name.endswith('.NS'):
        company_name += '.NS'

    # Download data
    try:
        data = yf.download(company_name, period='2y', auto_adjust=True, progress=False)
    except:
        print(f"❌ {company_name} not found")
        return None, None

    if data.empty:
        print(f"❌ No data found for {company_name}")
        return None, None

    if isinstance(data.columns, pd.MultiIndex):
        data.columns = [col[0] for col in data.columns]

    data.reset_index(inplace=True)
    data['Date'] = pd.to_datetime(data['Date'])
    data = data.sort_values('Date')
    data.set_index('Date', inplace=True)
    data = data.asfreq('B')

    print(f"✅ Analyzing: {company_name}")
    print(f"📊 Trading Days: {len(data)}")

    # Basic Calculations
    data['Daily_Return'] = data['Close'].pct_change() * 100
    data['MA_20'] = data['Close'].rolling(window=20).mean()
    data['MA_50'] = data['Close'].rolling(window=50).mean()

    # Stock Type Detection
    volatility = data['Daily_Return'].std()
    total_return = (data['Close'].iloc[-1] / data['Close'].iloc[0] - 1) * 100

    # Trend Strength
    price_change = data['Close'].iloc[-1] - data['Close'].iloc[0]
    total_movement = abs(data['Close'].diff()).sum()
    trend_strength = abs(price_change) / total_movement if total_movement > 0 else 0

    print(f"\n🔍 STOCK CHARACTERISTICS:")
    print(f"   Volatility: {volatility:.2f}%")
    print(f"   Total Return: {total_return:.2f}%")
    print(f"   Trend Strength: {trend_strength:.2f}")

    # Stock Classification
    if trend_strength > 0.15:
        stock_type = "TRENDING"
        recommendation = "Buy & Hold"
        reason = "Strong trend - holding works best"
    elif volatility > 2.0:
        stock_type = "VOLATILE"
        recommendation = "RSI Strategy"
        reason = "High volatility provides trading opportunities"
    else:
        stock_type = "STABLE"
        recommendation = "Buy & Hold"
        reason = "Low volatility - minimal trading benefits"

    print(f"   Stock Type: {stock_type}")
    print(f"   Recommendation: {recommendation}")
    print(f"   Reason: {reason}")

    # Test Both Strategies
    data['BuyHold_Return'] = (1 + data['Daily_Return']/100).cumprod()
    bh_return = (data['BuyHold_Return'].iloc[-1] - 1) * 100

    # RSI Strategy
    def calculate_rsi(prices, window=14):
        delta = prices.diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=window).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=window).mean()
        rs = gain / loss
        return 100 - (100 / (1 + rs))

    data['RSI_14'] = calculate_rsi(data['Close'])

    # Adaptive RSI based on stock type
    if stock_type == "VOLATILE":
        rsi_buy, rsi_sell = 35, 70
    else:
        rsi_buy, rsi_sell = 40, 75

    data['Signal'] = 0
    data.loc[data['RSI_14'] < rsi_buy, 'Signal'] = 1
    data.loc[data['RSI_14'] > rsi_sell, 'Signal'] = -1
    data['Strategy_Return'] = data['Signal'].shift(1) * data['Daily_Return']
    data['Strategy_Cumulative'] = (1 + data['Strategy_Return']/100).cumprod()
    strat_return = (data['Strategy_Cumulative'].iloc[-1] - 1) * 100

    buy_signals = (data['Signal'] == 1).sum()
    sell_signals = (data['Signal'] == -1).sum()

    print(f"\n📊 STRATEGY RESULTS:")
    print(f"   Buy & Hold: {bh_return:7.2f}%")
    print(f"   RSI Strategy: {strat_return:7.2f}%")
    print(f"   Advantage: {strat_return - bh_return:+.2f}%")
    print(f"   Trading Signals: Buy={buy_signals}, Sell={sell_signals}")

    # Final Decision
    advantage = strat_return - bh_return

    print(f"\n" + "=" * 50)
    print("🎯 INVESTMENT DECISION")
    print("=" * 50)

    if advantage > 3:
        final_rec = "USE RSI STRATEGY"
        print(f"✅ {final_rec}")
        print(f"💰 Expected advantage: +{advantage:.2f}%")
        print(f"🎯 Parameters: Buy RSI < {rsi_buy}, Sell RSI > {rsi_sell}")
    elif advantage > -2:
        final_rec = "EITHER STRATEGY OK"
        print(f"⚠️  {final_rec}")
        print(f"📊 Minimal difference: {advantage:.2f}%")
        print(f"💡 Choose based on risk preference")
    else:
        final_rec = "USE BUY & HOLD"
        print(f"❌ {final_rec}")
        print(f"📈 Buy & Hold return: {bh_return:.2f}%")
        print(f"🔧 RSI strategy underperforms by {abs(advantage):.2f}%")

    # Visualization (only for individual analysis)
    if company_name:
        plt.figure(figsize=(15, 10))

        # 1. Price and Signals
        plt.subplot(2, 2, 1)
        plt.plot(data.index, data['Close'], label='Price', linewidth=2, color='navy')

        if advantage > 3:
            buy_points = data[data['Signal'] == 1]
            sell_points = data[data['Signal'] == -1]
            if len(buy_points) > 0:
                plt.scatter(buy_points.index, buy_points['Close'], color='green',
                           marker='^', s=50, label='Buy', zorder=5)
            if len(sell_points) > 0:
                plt.scatter(sell_points.index, sell_points['Close'], color='red',
                           marker='v', s=50, label='Sell', zorder=5)

        plt.title(f'{company_name} - Price Chart')
        plt.legend()
        plt.grid(True, alpha=0.3)

        # 2. Returns Comparison
        plt.subplot(2, 2, 2)
        bh_cumulative = (data['BuyHold_Return'] - 1) * 100
        strat_cumulative = (data['Strategy_Cumulative'] - 1) * 100

        plt.plot(data.index, bh_cumulative, label=f'Buy & Hold ({bh_return:.1f}%)',
                 linewidth=3, color='blue')
        plt.plot(data.index, strat_cumulative, label=f'RSI Strategy ({strat_return:.1f}%)',
                 linewidth=2, color='green' if advantage > 0 else 'red')
        plt.title('Returns Comparison')
        plt.legend()
        plt.grid(True, alpha=0.3)

        # 3. RSI Indicator
        plt.subplot(2, 2, 3)
        plt.plot(data.index, data['RSI_14'], label='RSI', linewidth=2, color='purple')
        plt.axhline(rsi_sell, color='red', linestyle='--', label=f'Sell > {rsi_sell}')
        plt.axhline(rsi_buy, color='green', linestyle='--', label=f'Buy < {rsi_buy}')
        plt.axhline(50, color='gray', linestyle='--', alpha=0.5)
        plt.fill_between(data.index, rsi_sell, 100, alpha=0.2, color='red')
        plt.fill_between(data.index, 0, rsi_buy, alpha=0.2, color='green')
        plt.ylim(0, 100)
        plt.title('RSI Indicator')
        plt.legend()
        plt.grid(True, alpha=0.3)

        # 4. Stock Type Analysis
        plt.subplot(2, 2, 4)
        categories = ['Volatility', 'Trend Strength', 'Total Return']
        values = [volatility, trend_strength * 100, min(total_return, 100)]
        colors = ['orange', 'blue', 'green']

        bars = plt.bar(categories, values, color=colors, alpha=0.7, edgecolor='black')
        plt.title('Stock Characteristics')
        plt.ylabel('Score')
        plt.grid(True, alpha=0.3)

        for bar, value in zip(bars, values):
            plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 1,
                    f'{value:.1f}', ha='center', va='bottom', fontweight='bold')

        plt.tight_layout()
        plt.show(block=False)  # Non-blocking
        print("\n📊 Charts displayed. Closing in 3 seconds...")
        plt.pause(3)  # Show for 3 seconds
        plt.close('all')

    print(f"\n💡 SUMMARY: {company_name} is a {stock_type} stock")
    print(f"📈 For {stock_type} stocks: {recommendation} usually works best")

    # Return results for bulk analysis
    result = {
        'Stock': company_name,
        'Type': stock_type,
        'Volatility': volatility,
        'BuyHold_Return': bh_return,
        'Strategy_Return': strat_return,
        'Advantage': advantage,
        'Recommendation': final_rec,
        'Buy_Signals': buy_signals,
        'Sell_Signals': sell_signals
    }

    return data, result

def nifty_50_bulk_analysis():
    """
    NIFTY 50 BULK ANALYSIS - Complete the original project requirement
    """
    print("📊 NIFTY 50 BULK ANALYSIS")
    print("=" * 60)

    # Top 20 Nifty stocks (for demo - can extend to 50)
    nifty_stocks = [
        'RELIANCE.NS', 'TCS.NS', 'HDFCBANK.NS', 'ICICIBANK.NS', 'INFY.NS',
        'HINDUNILVR.NS', 'SBIN.NS', 'BHARTIARTL.NS', 'ITC.NS', 'KOTAKBANK.NS',
        'LT.NS', 'HCLTECH.NS', 'ASIANPAINT.NS', 'AXISBANK.NS', 'MARUTI.NS',
        'SUNPHARMA.NS', 'TITAN.NS', 'ULTRACEMCO.NS', 'WIPRO.NS', 'NESTLEIND.NS'
    ]

    print(f"🔍 Analyzing {len(nifty_stocks)} Nifty stocks...")
    print("This may take 3-5 minutes...")

    results = []
    successful_stocks = 0

    for i, stock in enumerate(nifty_stocks, 1):
        print(f"\n[{i}/{len(nifty_stocks)}] Analyzing {stock}...")
        try:
            data, result = smart_stock_analyzer(stock)
            if result:
                results.append(result)
                successful_stocks += 1
                print(f"✅ {stock} - Analysis completed")
            else:
                print(f"❌ {stock} - Analysis failed")
        except Exception as e:
            print(f"❌ {stock} - Error: {e}")
        print("-" * 40)

    # Create comprehensive summary
    if results:
        summary_df = pd.DataFrame(results)

        print(f"\n" + "=" * 80)
        print("🎯 NIFTY 50 ANALYSIS SUMMARY REPORT")
        print("=" * 80)

        # Overall Statistics
        total_stocks = len(results)
        winning_strategies = len([r for r in results if r['Advantage'] > 0])
        avg_return = summary_df['BuyHold_Return'].mean()
        avg_advantage = summary_df['Advantage'].mean()

        print(f"📈 OVERALL STATISTICS:")
        print(f"   Stocks Analyzed: {total_stocks}")
        print(f"   Successful Analyses: {successful_stocks}")
        print(f"   Strategy Winning Rate: {winning_strategies}/{total_stocks} ({winning_strategies/total_stocks*100:.1f}%)")
        print(f"   Average Buy & Hold Return: {avg_return:.2f}%")
        print(f"   Average Strategy Advantage: {avg_advantage:.2f}%")

        # Stock Type Distribution
        type_counts = summary_df['Type'].value_counts()
        print(f"\n📊 STOCK TYPE DISTRIBUTION:")
        for stock_type, count in type_counts.items():
            print(f"   {stock_type}: {count} stocks ({count/total_stocks*100:.1f}%)")

        # Recommendation Summary
        rec_counts = summary_df['Recommendation'].value_counts()
        print(f"\n🎯 RECOMMENDATION SUMMARY:")
        for rec, count in rec_counts.items():
            print(f"   {rec}: {count} stocks")

        # Top Performers
        print(f"\n🏆 TOP 5 STOCKS - STRATEGY ADVANTAGE:")
        top_advantage = summary_df.nlargest(5, 'Advantage')[['Stock', 'Advantage', 'Type']]
        for _, row in top_advantage.iterrows():
            print(f"   {row['Stock']}: +{row['Advantage']:.2f}% ({row['Type']})")

        # Worst Performers
        print(f"\n📉 WORST 5 STOCKS - STRATEGY DISADVANTAGE:")
        worst_advantage = summary_df.nsmallest(5, 'Advantage')[['Stock', 'Advantage', 'Type']]
        for _, row in worst_advantage.iterrows():
            print(f"   {row['Stock']}: {row['Advantage']:.2f}% ({row['Type']})")

        # Detailed Results Table
        print(f"\n" + "=" * 100)
        print("📋 DETAILED RESULTS - ALL STOCKS")
        print("=" * 100)

        display_df = summary_df[['Stock', 'Type', 'BuyHold_Return', 'Strategy_Return', 'Advantage', 'Recommendation']].round(2)
        print(display_df.to_string(index=False))

        # Visualization - Summary Charts
        plt.figure(figsize=(16, 12))

        # 1. Stock Type Distribution
        plt.subplot(2, 3, 1)
        type_counts.plot(kind='pie', autopct='%1.1f%%', colors=['lightblue', 'lightgreen', 'lightcoral'])
        plt.title('Stock Type Distribution')
        plt.ylabel('')

        # 2. Recommendation Distribution
        plt.subplot(2, 3, 2)
        rec_counts.plot(kind='bar', color=['green', 'orange', 'red'])
        plt.title('Recommendation Distribution')
        plt.xticks(rotation=45)

        # 3. Returns Comparison
        plt.subplot(2, 3, 3)
        plt.hist(summary_df['BuyHold_Return'], alpha=0.7, label='Buy & Hold', bins=15)
        plt.hist(summary_df['Strategy_Return'], alpha=0.7, label='Strategy', bins=15)
        plt.axvline(summary_df['BuyHold_Return'].mean(), color='blue', linestyle='--', label=f'BH Avg: {avg_return:.1f}%')
        plt.axvline(summary_df['Strategy_Return'].mean(), color='orange', linestyle='--', label=f'Strat Avg: {summary_df["Strategy_Return"].mean():.1f}%')
        plt.title('Returns Distribution')
        plt.legend()

        # 4. Advantage Distribution
        plt.subplot(2, 3, 4)
        colors = ['green' if x > 0 else 'red' for x in summary_df['Advantage']]
        plt.bar(range(len(summary_df)), summary_df['Advantage'], color=colors, alpha=0.7)
        plt.axhline(0, color='black', linewidth=1)
        plt.title('Strategy Advantage by Stock')
        plt.ylabel('Advantage %')
        plt.xticks([])

        # 5. Volatility vs Returns
        plt.subplot(2, 3, 5)
        colors = {'VOLATILE': 'red', 'STABLE': 'green', 'TRENDING': 'blue'}
        for stock_type in summary_df['Type'].unique():
            subset = summary_df[summary_df['Type'] == stock_type]
            plt.scatter(subset['Volatility'], subset['BuyHold_Return'],
                       label=stock_type, color=colors[stock_type], alpha=0.7, s=60)
        plt.xlabel('Volatility %')
        plt.ylabel('Buy & Hold Return %')
        plt.title('Volatility vs Returns')
        plt.legend()

        # 6. Strategy Performance by Stock Type
        plt.subplot(2, 3, 6)
        type_advantage = summary_df.groupby('Type')['Advantage'].mean()
        type_advantage.plot(kind='bar', color=['green', 'red', 'blue'])
        plt.title('Average Advantage by Stock Type')
        plt.ylabel('Advantage %')
        plt.xticks(rotation=45)

        plt.tight_layout()
        plt.show()

        # Save results to CSV
        summary_df.to_csv('nifty_50_analysis_results.csv', index=False)
        print(f"\n💾 Results saved to 'nifty_50_analysis_results.csv'")

        return summary_df
    else:
        print("❌ No successful analyses to summarize")
        return None

def main_menu():
    """
    MAIN MENU - User Interface
    """
    while True:
        print("\n" + "=" * 60)
        print("🧠 QUANTITATIVE STOCK ANALYSIS PLATFORM")
        print("=" * 60)
        print("1. 🔍 Analyze Individual Stock")
        print("2. 📊 Nifty 50 Bulk Analysis")
        print("3. 📈 View Previous Results")
        print("4. 🚪 Exit")
        print("-" * 60)

        choice = input("Enter your choice (1-4): ").strip()

        if choice == '1':
            data, result = smart_stock_analyzer()
            if result:
                input("\nPress Enter to continue...")

        elif choice == '2':
            results = nifty_50_bulk_analysis()
            if results is not None:
                input("\nPress Enter to continue...")

        elif choice == '3':
            try:
                results_df = pd.read_csv('nifty_50_analysis_results.csv')
                print("\n📋 PREVIOUS RESULTS:")
                print(results_df.to_string(index=False))
            except:
                print("❌ No previous results found. Run analysis first.")
            input("\nPress Enter to continue...")

        elif choice == '4':
            print("\n🎉 Thank you for using Quantitative Stock Analysis Platform!")
            print("🚀 Happy Investing!")
            break

        else:
            print("❌ Invalid choice. Please enter 1-4.")

# Run the platform
if __name__ == "__main__":
    main_menu()

